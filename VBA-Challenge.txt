Sub stockCalc()
'dimensionalize columns and integers
        Dim StockName As String
        Dim NextStock As String
        Dim TotalStockVolume As Double
        Dim OpeningPrice As Double
        Dim ClosingPrice As Double
        Dim i As Long
        Dim LastRow As Long
        Dim ws As Worksheet
        Dim Dataset As Variant
        Dim DataRange As Range
        Dim OutputData As Range
        Dim GPercIncrease As Double
        Dim GPercDecrease As Double
        Dim GTotalVolume As Double
        
For Each ws In ActiveWorkbook.Worksheets
'below, setting my placements for column headers
        With ws
                .Range("I:Q").ClearContents

                Dataset = .Range("A1").CurrentRegion
                Set DataRange = .Range("A1").CurrentRegion
                .Range("I1").Value = "Ticker"

                .Range("J1").Value = "Yearly Charge"
                .Range("K1").Value = "Percent Change"
                .Range("L1").Value = "Total Stock Volume"

                .Range("O2").Value = "Greatest % Increase"
                .Range("O3").Value = "Greatest % Decrease"
                .Range("O4").Value = "Greates Total Volume"

                .Range("P1").Value = "Ticker"
                .Range("Q1").Value = "Value"

                TotalStockVolume = 0
                StockNo = 1

                OpeningPrice = Dataset(2, 3)
                LastRow = UBound(Dataset, 1)

'looping through the data
                For i = 2 To LastRow

                        StockName = Dataset(i, 1)
                        If i = LastRow Then
                                NextStock = ""
                        Else
                                NextStock = Dataset(i + 1, 1)
                        End If

                        If NextStock = StockName Then

                        Else

                                TotalStockVolume = WorksheetFunction.SumIf(DataRange.Columns(1), StockName, DataRange.Columns(7))
                                ClosingPrice = Dataset(i, 6)

                                YearlyChange = ClosingPrice - OpeningPrice
                                PercentageChange = YearlyChange / OpeningPrice

                                DataRange.Range("I" & StockNo + 1).Value = StockName
                                DataRange.Range("J" & StockNo + 1).Value = YearlyChange
                                DataRange.Range("K" & StockNo + 1).Value = PercentageChange
                                DataRange.Range("L" & StockNo + 1).Value = TotalStockVolume

                                TotalStockVolume = 0

                                If i = LastRow Then
                                        OpeningPrice = 0
                                Else
                                        OpeningPrice = Dataset(i + 1, 3)
                                End If

                                StockNo = StockNo + 1

                        End If

                Next i
                Set OutputData = .Range("I1").CurrentRegion
                
                GPercIncrease = Application.Max(OutputData.Columns(3))
                GPercDecrease = Application.Min(OutputData.Columns(3))
                GTotalVolume = Application.Max(OutputData.Columns(4))

                .Range("Q2") = GPercIncrease
                .Range("Q3") = GPercDecrease
                .Range("Q4") = GTotalVolume

                .Range("P2") = OutputData.Cells(WorksheetFunction.Match(GPercIncrease, OutputData.Columns(3), 0), 1)
                .Range("P3") = OutputData.Cells(WorksheetFunction.Match(GPercDecrease, OutputData.Columns(3), 0), 1)
                .Range("P4") = OutputData.Cells(WorksheetFunction.Match(GTotalVolume, OutputData.Columns(4), 0), 1)

                .Range("Q2").NumberFormat = "0.00%"
                .Range("Q3").NumberFormat = "0.00%"
                OutputData.Columns(3).NumberFormat = "0.00%"
                
                .Activate
                Cells.FormatConditions.Delete
                
                Range("J2:J" & OutputData.Rows.Count).Select
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
                Formula1:="=0"
                Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
                
                With Selection.FormatConditions(1).Font
                        .Color = -16752384
                End With
                With Selection.FormatConditions(1).Interior
                        .Color = 13561798
                End With
                Selection.FormatConditions(1).StopIfTrue = False
                
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
                        Formula1:="=0"
                Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
                With Selection.FormatConditions(1).Font
                        .Color = -16383844
                End With
                With Selection.FormatConditions(1).Interior
                        .PatternColorIndex = xlAutomatic
                        .Color = 13551615
                End With
                Selection.FormatConditions(1).StopIfTrue = False
                End With
Next

End Sub


